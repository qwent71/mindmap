{
	"nodes":[
		{"id":"3c46cfa4f64413bd","type":"text","text":"Уровни изоляций","x":920,"y":-1180,"width":250,"height":60},
		{"id":"704fceea5d34681e","type":"text","text":"Аномалии\n","x":1260,"y":-3700,"width":250,"height":60},
		{"id":"9b69e0d29521904a","type":"text","text":"### [Read uncommitted (чтение незафиксированных данных)](https://backendinterview.ru/db/dBTheory/transactions.html#read-uncommitted-%D1%87%D1%82%D0%B5%D0%BD%D0%B8%D0%B5-%D0%BD%D0%B5%D0%B7%D0%B0%D1%84%D0%B8%D0%BA%D1%81%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D1%8B%D1%85-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85)\n\nНизший (первый) уровень изоляции. Он гарантирует только отсутствие потерянных обновлений[1]. Если несколько параллельных транзакций пытаются изменять одну и ту же строку таблицы, то в окончательном варианте строка будет иметь значение, определенное всем набором успешно выполненных транзакций. При этом возможно считывание не только логически несогласованных данных, но и данных, изменения которых ещё не зафиксированы.\n\nТипичный способ реализации данного уровня изоляции — блокировка данных на время выполнения команды изменения, что гарантирует, что команды изменения одних и тех же строк, запущенные параллельно, фактически выполнятся последовательно, и ни одно из изменений не потеряется. Транзакции, выполняющие только чтение, при данном уровне изоляции никогда не блокируются.","x":-580,"y":-2147,"width":502,"height":638},
		{"id":"2129c964f931dd44","type":"text","text":"### [Read committed (чтение фиксированных данных)](https://backendinterview.ru/db/dBTheory/transactions.html#read-committed-%D1%87%D1%82%D0%B5%D0%BD%D0%B8%D0%B5-%D1%84%D0%B8%D0%BA%D1%81%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D1%8B%D1%85-%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D1%85)\n\nНа этом уровне обеспечивается защита от чернового, «грязного» чтения, тем не менее, в процессе работы одной транзакции другая может быть успешно завершена и сделанные ею изменения зафиксированы. В итоге первая транзакция будет работать с другим набором данных.\n\nРеализация завершённого чтения может основываться на одном из двух подходов: блокировании или версионности:\n\n- **Блокирование читаемых и изменяемых данных**. Заключается в том, что читающая транзакция блокирует читаемые данные в разделяемом (shared) режиме, в результате чего параллельная транзакция, пытающаяся изменить эти данные, приостанавливается, а пишущая транзакция блокирует изменяемые данные для читающих транзакций, работающих на уровне read committed или более высоком, до своего завершения, препятствуя, таким образом, «грязному» чтению.\n- **MVCC(Multiversion concurrency control) Сохранение нескольких версий параллельно изменяемых строк**. При каждом изменении строки СУБД создаёт новую версию этой строки, с которой продолжает работать изменившая данные транзакция, в то время как любой другой «читающей» транзакции возвращается последняя зафиксированная версия. Преимущество такого подхода в том, что он обеспечивает бо́льшую скорость, так как предотвращает блокировки. Однако он требует, по сравнению с первым, существенно бо́льшего расхода оперативной памяти, которая тратится на хранение версий строк. Кроме того, при параллельном изменении данных несколькими транзакциями может создаться ситуация, когда несколько параллельных транзакций произведут несогласованные изменения одних и тех же данных (поскольку блокировки отсутствуют, ничто не помешает это сделать). Тогда та транзакция, которая зафиксируется первой, сохранит свои изменения в основной БД, а остальные параллельные транзакции окажется невозможно зафиксировать (так как это приведёт к потере обновления первой транзакции). Единственное, что может в такой ситуации СУБД — это откатить остальные транзакции и выдать сообщение об ошибке «Запись уже изменена».","x":291,"y":-2147,"width":965,"height":660},
		{"id":"fb7f09f79b3a648a","type":"text","text":"### Phantom reads\n- фантомное чтение (англ. phantom reads) — одна транзакция в ходе своего выполнения несколько раз выбирает множество строк по одним и тем же критериям. Другая транзакция в интервалах между этими выборками добавляет или удаляет строки, или изменяет столбцы некоторых строк, используемых в критериях выборки первой транзакции, и успешно заканчивается. В результате получится, что одни и те же выборки в первой транзакции дают разные множества строк.\n\n|Транзакция 1|Транзакция 2|\n|---|---|\n||`SELECT SUM(f2) FROM tbl1;`|\n|`INSERT INTO tbl1 (f1,f2) VALUES (15,20);`||\n|`COMMIT;`||\n||`SELECT SUM(f2) FROM tbl1;`|\n","x":1300,"y":-3100,"width":820,"height":440},
		{"id":"110a1dd8b4d34928","type":"text","text":"### [Repeatable read (повторяемость чтения)](https://backendinterview.ru/db/dBTheory/transactions.html#repeatable-read-%D0%BF%D0%BE%D0%B2%D1%82%D0%BE%D1%80%D1%8F%D0%B5%D0%BC%D0%BE%D1%81%D1%82%D1%8C-%D1%87%D1%82%D0%B5%D0%BD%D0%B8%D1%8F)\n\nУровень, при котором читающая транзакция «не видит» изменения данных, которые были ею ранее прочитаны. При этом никакая другая транзакция не может изменять данные, читаемые текущей транзакцией, пока та не окончена.\n\nБлокировки в разделяющем режиме применяются ко всем данным, считываемым любой инструкцией транзакции, и сохраняются до её завершения. Это запрещает другим транзакциям изменять строки, которые были считаны незавершённой транзакцией. Однако другие транзакции могут вставлять новые строки, соответствующие условиям поиска инструкций, содержащихся в текущей транзакции. При повторном запуске инструкции текущей транзакцией будут извлечены новые строки, что приведёт к фантомному чтению. Учитывая то, что разделяющие блокировки сохраняются до завершения транзакции, а не снимаются в конце каждой инструкции, степень параллелизма ниже, чем при уровне изоляции READ COMMITTED. Поэтому пользоваться данным и более высокими уровнями транзакций без необходимости обычно не рекомендуется.","x":1468,"y":-2124,"width":524,"height":615},
		{"id":"1c7886144ba6e1e4","type":"text","text":"\n```sql\nBEGIN ISOLATION LEVEL REPEATABLE READ; -- начало транзакции\nUPDATE users SET balance = balance - 100 WHERE id = 123; -- обновление баланса пользователя\nINSERT INTO transactions (user_id, amount) VALUES (123, -100); -- создание записи о транзакции\nCOMMIT; -- фиксация транзакции\n\n```\n","x":1600,"y":-1150,"width":566,"height":240},
		{"id":"a577e6fdddee48a7","type":"text","text":"```sql\nBEGIN; -- начало транзакции\nUPDATE users SET balance = balance - 100 WHERE id = 123; -- обновление баланса пользователя\nINSERT INTO transactions (user_id, amount) VALUES (123, -100); -- создание записи о транзакции\nCOMMIT; -- фиксация транзакции\n\n```","x":-1611,"y":880,"width":731,"height":227},
		{"id":"2f45d48b7cbb6de5","type":"text","text":"# ACID\n**ACID** описывает требования к транзакционной системе (например, к СУБД), обеспечивающие наиболее надёжную и предсказуемую её работу. Требования **ACID** были в основном сформулированы в конце 70-х годов Джимом Греем.","x":-510,"y":480,"width":500,"height":240},
		{"id":"ed259ba87afc13f5","type":"text","text":"### [Atomicity — Атомарность](https://backendinterview.ru/db/dBTheory/transactions.html#atomicity--%D0%90%D1%82%D0%BE%D0%BC%D0%B0%D1%80%D0%BD%D0%BE%D1%81%D1%82%D1%8C)\n\nАтомарность гарантирует, что никакая транзакция не будет зафиксирована в системе частично.\n\n\n\nАтомарность гарантирует, что никакая транзакция не будет зафиксирована в системе частично. Будут либо выполнены все её подоперации, либо не выполнено ни одной. Поскольку на практике невозможно одновременно и атомарно выполнить всю последовательность операций внутри транзакции, вводится понятие «отката» (rollback): если транзакцию не удаётся полностью завершить, результаты всех её до сих пор произведённых действий будут отменены и система вернётся во «внешне исходное» состояние — со стороны будет казаться, что транзакции и не было. (Естественно, счётчики, индексы и другие внутренние структуры могут измениться, но, если СУБД запрограммирована без ошибок, это не повлияет на внешнее её поведение.)","x":-1840,"y":-350,"width":640,"height":440},
		{"id":"955db8f9456866c2","type":"text","text":"### [Consistency — Согласованность](https://backendinterview.ru/db/dBTheory/transactions.html#consistency--%D0%A1%D0%BE%D0%B3%D0%BB%D0%B0%D1%81%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D1%8C)\n\nДругими словами, каждая успешная транзакция по определению фиксирует только допустимые результаты.\n\nТранзакция, достигающая своего нормального завершения (EOT — end of transaction, завершение транзакции) и, тем самым, фиксирующая свои результаты, сохраняет согласованность базы данных. Другими словами, каждая успешная транзакция по определению фиксирует только допустимые результаты.\n\nСогласованность является более широким понятием. Например, в банковской системе может существовать требование равенства суммы, списываемой с одного счёта, сумме, зачисляемой на другой. Это бизнес-правило и оно не может быть гарантировано только проверками целостности, его должны соблюсти программисты при написании кода транзакций. Если какая-либо транзакция произведёт списание, но не произведёт зачисление, то система останется в некорректном состоянии и свойство согласованности будет нарушено.","x":-1110,"y":-350,"width":600,"height":440},
		{"id":"d309675851ed15c0","type":"text","text":"### [Isolation — Изолированность](https://backendinterview.ru/db/dBTheory/transactions.html#isolation--%D0%98%D0%B7%D0%BE%D0%BB%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D1%8C)\n\nВо время выполнения транзакции параллельные транзакции не должны оказывать влияние на её результат. Изолированность — требование дорогое, поэтому в реальных БД существуют режимы, не полностью изолирующие транзакцию","x":-440,"y":-350,"width":589,"height":180},
		{"id":"03ff4fe8bbf77440","type":"text","text":"### [Durability — Долговечность](https://backendinterview.ru/db/dBTheory/transactions.html#durability--%D0%94%D0%BE%D0%BB%D0%B3%D0%BE%D0%B2%D0%B5%D1%87%D0%BD%D0%BE%D1%81%D1%82%D1%8C)\n\nНезависимо от проблем на нижних уровнях (к примеру, обесточивание системы или сбои в оборудовании) изменения, сделанные успешно завершённой транзакцией, должны остаться сохранёнными после возвращения системы в работу. Другими словами, если пользователь получил подтверждение от системы, что транзакция выполнена, он может быть уверен, что сделанные им изменения не будут отменены из-за какого-либо сбоя.","x":291,"y":-350,"width":500,"height":340},
		{"id":"30dd2f3ad77376ee","type":"text","text":"![[Pasted image 20240712070315.png]]","x":-1480,"y":-1320,"width":1480,"height":741},
		{"id":"e7661d120f326009","type":"text","text":"### **Share Lock**: \nИспользуется для операций, требующих совместного доступа к таблице, таких как создание индекса.","x":-5332,"y":-134,"width":378,"height":153},
		{"id":"ec992a91359934b1","type":"text","text":"### **Share Update Exclusive Lock**:\n\nИспользуется для операций, изменяющих индексы таблицы.\n","x":-5326,"y":-404,"width":372,"height":199},
		{"id":"619b3e917f65ea0a","type":"text","text":"### **Row Exclusive Lock**:\nИспользуется при вставке, обновлении или удалении строк. Блокирует только строки, которые изменяются.","x":-5323,"y":-667,"width":366,"height":177},
		{"id":"0a2dbc8b7851b341","type":"text","text":"### **Access Share Lock**: \nИспользуется для чтения данных из таблицы. Позволяет другим транзакциям также читать таблицу, но не обновлять или изменять ее структуру.","x":-5321,"y":-1210,"width":364,"height":229},
		{"id":"9dfac468315f7465","type":"text","text":"### **Row Share Lock**:\nИспользуется для блокировки строк таблицы (например, при выполнении `SELECT FOR UPDATE`).","x":-5321,"y":-914,"width":364,"height":145},
		{"id":"c415e28d38524faf","type":"text","text":"### **Share Row Exclusive Lock**:\nИспользуется для операций, изменяющих структуру таблицы, таких как добавление или удаление столбцов.","x":-5347,"y":94,"width":390,"height":164},
		{"id":"0c724f53238378ee","type":"text","text":"### **Exclusive Lock**: \nИспользуется для операций, которые требуют эксклюзивного доступа к таблице, таких как переименование таблицы.","x":-5347,"y":334,"width":399,"height":172},
		{"id":"dc11aead689beb32","type":"text","text":"### **Access Exclusive Lock**:\nИспользуется для операций, которые требуют полного исключения других транзакций из доступа к таблице, таких как удаление таблицы или изменение её структуры.","x":-5360,"y":574,"width":412,"height":156},
		{"id":"9b990f7e83d9b2af","type":"text","text":"### Блокировки\n\nhttps://www.postgresql.org/docs/current/explicit-locking.html","x":-2920,"y":-578,"width":330,"height":138},
		{"id":"9984ee3a87c1c602","type":"text","text":"### Table-Level Locks (Блокировки на уровне таблиц)","x":-4160,"y":-490,"width":336,"height":133},
		{"id":"b8f02f3e978b3d47","type":"text","text":"### Page-Level Locks (Блокировки на уровне страниц)\n\nВ дополнение к блокировкам таблиц и строк, блокировки общего/исключительного уровня страниц используются для управления доступом на чтение/запись к страницам таблиц в общем буферном пуле. Эти блокировки снимаются немедленно после извлечения или обновления строки. Разработчикам приложений обычно не нужно беспокоиться о блокировках на уровне страниц, но они упомянуты здесь для полноты.","x":-4040,"y":62,"width":440,"height":358},
		{"id":"f74c1adba0a5f3a7","type":"text","text":"### Row-Level Locks (Блокировки на уровне строк)","x":-3748,"y":-1258,"width":387,"height":97},
		{"id":"4e714b9bc5dafdfc","type":"text","text":"```sql\n-- Транзакция 1\nBEGIN TRANSACTION;\n\n-- Получение эксклюзивной блокировки на таблицу\nLOCK TABLE accounts IN EXCLUSIVE MODE;\n\n-- Обновление данных\nUPDATE accounts\nSET balance = balance - 100\nWHERE account_id = 1;\n\n-- Фиксация транзакции\nCOMMIT;\n\n```","x":-5384,"y":-4560,"width":700,"height":351},
		{"id":"7dfb37011d9c32a9","type":"text","text":"### Пример 3: `LOCK TABLE`\n\nЭтот пример показывает, как заблокировать всю таблицу для эксклюзивного доступа.","x":-5384,"y":-3807,"width":440,"height":133},
		{"id":"055f6a42c93ba69b","type":"text","text":"### Пример 4: `SELECT ... NOWAIT`\n\nЭтот пример показывает, как использовать `NOWAIT`, чтобы не ждать блокировку, если она не может быть немедленно получена.","x":-4804,"y":-3807,"width":487,"height":165},
		{"id":"362854891ed25e23","type":"text","text":"```sql\n-- Транзакция 2\nBEGIN TRANSACTION;\n\n-- Попытка получения эксклюзивной блокировки на строку без ожидания\n-- Если строка уже заблокирована, запрос завершится с ошибкой\nSELECT balance FROM accounts WHERE account_id = 1 FOR UPDATE NOWAIT;\n\n-- Обновление данных (если блокировка была успешной)\nUPDATE accounts\nSET balance = balance + 100\nWHERE account_id = 1;\n\n-- Фиксация изменений\nCOMMIT;\n```","x":-4560,"y":-4560,"width":677,"height":351},
		{"id":"6afa4307c9a36135","type":"text","text":"### Пример 5: `SELECT ... SKIP LOCKED`\n\nЭтот пример показывает, как пропустить заблокированные строки и работать с доступными.","x":-4109,"y":-3785,"width":451,"height":143},
		{"id":"492c88e134773ecd","type":"text","text":"```sql\n-- Транзакция 2\nBEGIN TRANSACTION;\n\n-- Попытка получить эксклюзивную блокировку, пропуская заблокированные строки\nSELECT balance FROM accounts WHERE account_id = 1 FOR UPDATE SKIP LOCKED;\n\n-- Обновление данных для всех доступных строк\nUPDATE accounts\nSET balance = balance + 100\nWHERE account_id = 1;\n\n-- Фиксация изменений\nCOMMIT;\n\n```","x":-3804,"y":-4560,"width":560,"height":351},
		{"id":"14fec2846cbc7c0e","type":"text","text":"```sql\n-- Транзакция 1\nBEGIN TRANSACTION;\n\n-- Получение разделяемой блокировки на строку\nSELECT balance FROM accounts WHERE account_id = 1 FOR SHARE;\n\n-- Чтение данных\nSELECT balance FROM accounts WHERE account_id = 1;\n\n-- Фиксация транзакции\nCOMMIT;\n\n```","x":-4673,"y":-2535,"width":632,"height":351},
		{"id":"df956f02ce2639b3","type":"text","text":"###  FOR SHARE\n\n`SELECT FOR SHARE` блокирует выбранные строки для чтения. Это означает, что другие транзакции могут читать эти строки, но не могут их изменять или удалять до завершения текущей транзакции. `FOR SHARE` полезен в сценариях, когда вам нужно убедиться, что данные остаются неизменными на время выполнения ваших операций, но вы не планируете их изменять.","x":-4673,"y":-1860,"width":512,"height":281},
		{"id":"9a8320343155a14f","type":"text","text":"```sql\n-- Транзакция 1\nBEGIN TRANSACTION;\n\n-- Получение эксклюзивной блокировки на строку\nSELECT balance FROM accounts WHERE account_id = 1 FOR UPDATE;\n\n-- Обновление баланса\nUPDATE accounts\nSET balance = balance - 100\nWHERE account_id = 1;\n\n-- Фиксация изменений\nCOMMIT;\n```","x":-5489,"y":-2535,"width":640,"height":351},
		{"id":"1d0f984d6251a7ec","type":"text","text":"###  FOR UPDATE\n\n`SELECT FOR UPDATE` блокирует выбранные строки для обновления. Это означает, что другие транзакции не могут изменить или удалить эти строки до тех пор, пока текущая транзакция не завершится (не будет зафиксирована или откатится). Это полезно, когда вы хотите убедиться, что строки, которые вы собираетесь обновить или удалить, не изменятся до завершения ваших действий.","x":-5429,"y":-1860,"width":580,"height":251},
		{"id":"f1f4463e467e286d","type":"text","text":"```sql\n-- Транзакция A\nBEGIN;\nSELECT * FROM employees WHERE department_id = 10 FOR SHARE;\n\n-- Транзакция B (выполнится одновременно с Транзакцией A)\nBEGIN;\nSELECT * FROM employees WHERE department_id = 10 FOR SHARE;\n\n-- Транзакция C (будет ждать завершения Транзакции A или B)\nBEGIN;\nSELECT * FROM employees WHERE department_id = 10 FOR UPDATE;\n\n```","x":-5036,"y":-3220,"width":533,"height":440},
		{"id":"99504f3be2b3b7ed","type":"text","text":"###  FOR NO KEY UPDATE\n\n`FOR NO KEY UPDATE` — это более мягкая форма блокировки, чем `FOR UPDATE`. Она блокирует выбранные строки для обновления, но позволяет другим транзакциям устанавливать `FOR KEY SHARE` блокировки на те же строки. Используется в случаях, когда транзакция не собирается изменять ключевые атрибуты строки (например, первичные или уникальные ключи), но может изменить другие столбцы.","x":-2862,"y":-1860,"width":509,"height":303},
		{"id":"e761e9d3f989c879","type":"text","text":"###  FOR KEY SHARE\n\n`FOR KEY SHARE` — это блокировка на уровне строк, которая предотвращает изменение или удаление строки другой транзакцией, но позволяет другим транзакциям устанавливать `FOR SHARE` или `FOR KEY SHARE` блокировки. Эта блокировка полезна для сценариев, когда необходимо читать строки, защищая их от изменений ключевых атрибутов, но не против обновлений неключевых атрибутов.","x":-2233,"y":-1860,"width":480,"height":314},
		{"id":"7a8c85f1934ec595","type":"text","text":"```sql\nBEGIN;\nSELECT * FROM employees WHERE department_id = 10 FOR NO KEY UPDATE;\n-- Здесь вы можете выполнить обновление не ключевых столбцов строк\nUPDATE employees SET salary = salary * 1.1 WHERE department_id = 10;\nCOMMIT;\n\n```","x":-2862,"y":-2348,"width":697,"height":176},
		{"id":"98e889909db00366","type":"text","text":"```sql\n-- Транзакция A\nBEGIN;\nSELECT * FROM employees WHERE department_id = 10 FOR NO KEY UPDATE;\n\n-- Транзакция B (может выполниться одновременно с Транзакцией A)\nBEGIN;\nSELECT * FROM employees WHERE department_id = 10 FOR KEY SHARE;\n\n-- Транзакция C (будет ждать завершения Транзакции A)\nBEGIN;\nSELECT * FROM employees WHERE department_id = 10 FOR UPDATE;\n\n```","x":-2512,"y":-3089,"width":694,"height":390},
		{"id":"1d9b780f70b238a8","type":"text","text":"```sql\nBEGIN;\nSELECT * FROM employees WHERE department_id = 10 FOR KEY SHARE;\n-- Здесь вы можете выполнять операции, которые не изменяют строки\n-- Например, сложные вычисления или анализ данных\nCOMMIT;\n\n```","x":-2026,"y":-2409,"width":546,"height":237},
		{"id":"42b81a79c6d754d5","type":"file","file":"db/img/Pasted image 20240712074737.png","x":-4000,"y":-2015,"width":1000,"height":312},
		{"id":"0c815c6d5fb73465","type":"file","file":"db/img/Pasted image 20240712073652.png","x":-6680,"y":-616,"width":1093,"height":352},
		{"id":"a2e89044e5f679e9","type":"text","text":"### **Exclusive Lock (Блокировка на запись)**\n\n- Используется для операций, которые изменяют данные на странице, таких как вставка, обновление или удаление строк. Эта блокировка предотвращает одновременный доступ других транзакций к этой странице для изменения данных.","x":-4514,"y":600,"width":474,"height":308},
		{"id":"73b93a67e8da1d3c","type":"text","text":"### **Shared Lock (Блокировка на чтение)**\n\n- Используется для операций чтения данных на странице. Эта блокировка позволяет другим транзакциям также читать данные на этой странице, но не изменять их.\n","x":-3640,"y":600,"width":439,"height":300},
		{"id":"114fd820627b7857","type":"text","text":"```sql\nBEGIN;\nINSERT INTO my_table (column1, column2) VALUES ('value1', 'value2');\n-- При вставке строки страница, на которой хранится новая строка, блокируется на запись.\nCOMMIT;\n\n```","x":-4628,"y":1145,"width":636,"height":175},
		{"id":"71dcd2304f1537aa","type":"text","text":"```sql\nBEGIN;\nCREATE INDEX my_index ON my_table (column1);\n-- Создание индекса может включать блокировки на уровне страниц для обеспечения целостности данных.\nCOMMIT;\n\n```","x":-3760,"y":1107,"width":492,"height":230},
		{"id":"6aeee440d2a8e426","type":"text","text":"### Deadlocks","x":-3080,"y":60,"width":220,"height":60},
		{"id":"62c91e101ecd7860","type":"text","text":"###  Non-repeatable read\n\n- неповторяющееся чтение (англ. non-repeatable read) — при повторном чтении в рамках одной транзакции ранее прочитанные данные оказываются изменёнными;\n\n|Транзакция 1|Транзакция 2|\n|---|---|\n||`SELECT f2 FROM tbl1 WHERE f1=1;`|\n|`UPDATE tbl1 SET f2=f2+1 WHERE f1=1;`||\n|`COMMIT;`||\n||`SELECT f2 FROM tbl1 WHERE f1=1;`|","x":394,"y":-3100,"width":806,"height":440},
		{"id":"34732ed905bbfa78","type":"text","text":"### Dirty read\n\n- «грязное» чтение (англ. dirty read) — чтение данных, добавленных или изменённых транзакцией, которая впоследствии не подтвердится (откатится);\n\n  \n\n|Транзакция 1|Транзакция 2|\n|---|---|\n|`UPDATE tbl1 SET f2=f2+1 WHERE f1=1;`||\n||`SELECT f2 FROM tbl1 WHERE f1=1;`|\n|`ROLLBACK WORK;`|","x":-415,"y":-3100,"width":706,"height":440},
		{"id":"6fa27367ea98a0d3","type":"text","text":"### Lost update\n- потерянное обновление (англ. lost update) — при одновременном изменении одного блока данных разными транзакциями одно из изменений теряется;\n\n| Транзакция 1                           | Транзакция 2                           |\n| -------------------------------------- | -------------------------------------- |\n| `UPDATE tbl1 SET f2=f2+20 WHERE f1=1;` | `UPDATE tbl1 SET f2=f2+25 WHERE f1=1;` |","x":2217,"y":-3100,"width":639,"height":440},
		{"id":"58ca2af452e3f3c8","type":"text","text":"### [Serializable (упорядочиваемость)](https://backendinterview.ru/db/dBTheory/transactions.html#serializable-%D1%83%D0%BF%D0%BE%D1%80%D1%8F%D0%B4%D0%BE%D1%87%D0%B8%D0%B2%D0%B0%D0%B5%D0%BC%D0%BE%D1%81%D1%82%D1%8C)\n\nСамый высокий уровень изолированности; транзакции полностью изолируются друг от друга, каждая выполняется так, как будто параллельных транзакций не существует. Только на этом уровне параллельные транзакции не подвержены эффекту «фантомного чтения».","x":2217,"y":-1827,"width":446,"height":318}
	],
	"edges":[
		{"id":"80d06feecbcacab5","fromNode":"2f45d48b7cbb6de5","fromSide":"top","toNode":"ed259ba87afc13f5","toSide":"bottom"},
		{"id":"e93f2172364131b8","fromNode":"2f45d48b7cbb6de5","fromSide":"top","toNode":"955db8f9456866c2","toSide":"bottom"},
		{"id":"f403d03976fc56a0","fromNode":"2f45d48b7cbb6de5","fromSide":"top","toNode":"d309675851ed15c0","toSide":"bottom"},
		{"id":"eb339bb7cb15f41a","fromNode":"2f45d48b7cbb6de5","fromSide":"top","toNode":"03ff4fe8bbf77440","toSide":"bottom"},
		{"id":"2f3dd08b7f4059a0","fromNode":"2f45d48b7cbb6de5","fromSide":"bottom","toNode":"a577e6fdddee48a7","toSide":"top"},
		{"id":"3ee069ad05b9aef1","fromNode":"d309675851ed15c0","fromSide":"top","toNode":"3c46cfa4f64413bd","toSide":"bottom"},
		{"id":"506046779970ac92","fromNode":"3c46cfa4f64413bd","fromSide":"top","toNode":"9b69e0d29521904a","toSide":"bottom"},
		{"id":"46d5fd4ca74141e1","fromNode":"3c46cfa4f64413bd","fromSide":"top","toNode":"2129c964f931dd44","toSide":"bottom"},
		{"id":"3b49e69996610fc8","fromNode":"3c46cfa4f64413bd","fromSide":"top","toNode":"110a1dd8b4d34928","toSide":"bottom"},
		{"id":"9d813113f2cad3b8","fromNode":"3c46cfa4f64413bd","fromSide":"top","toNode":"58ca2af452e3f3c8","toSide":"bottom"},
		{"id":"2040e99bcab0d283","fromNode":"704fceea5d34681e","fromSide":"bottom","toNode":"62c91e101ecd7860","toSide":"top"},
		{"id":"9495146c674737f2","fromNode":"704fceea5d34681e","fromSide":"bottom","toNode":"6fa27367ea98a0d3","toSide":"top"},
		{"id":"95af530ed4f641ff","fromNode":"704fceea5d34681e","fromSide":"bottom","toNode":"fb7f09f79b3a648a","toSide":"top"},
		{"id":"1c619df547107df0","fromNode":"704fceea5d34681e","fromSide":"bottom","toNode":"34732ed905bbfa78","toSide":"top"},
		{"id":"496057863334b894","fromNode":"9b69e0d29521904a","fromSide":"top","toNode":"62c91e101ecd7860","toSide":"bottom","color":"1"},
		{"id":"c69034a2a3a96d92","fromNode":"9b69e0d29521904a","fromSide":"top","toNode":"fb7f09f79b3a648a","toSide":"bottom","color":"1"},
		{"id":"e20bcfb88cf1457f","fromNode":"9b69e0d29521904a","fromSide":"top","toNode":"34732ed905bbfa78","toSide":"bottom","color":"1"},
		{"id":"f5e2429760e3e82b","fromNode":"2129c964f931dd44","fromSide":"top","toNode":"fb7f09f79b3a648a","toSide":"bottom","color":"3"},
		{"id":"b268e521da6fd583","fromNode":"2129c964f931dd44","fromSide":"top","toNode":"62c91e101ecd7860","toSide":"bottom","color":"3"},
		{"id":"efdce58c8a51d43e","fromNode":"110a1dd8b4d34928","fromSide":"top","toNode":"fb7f09f79b3a648a","toSide":"bottom","color":"4"},
		{"id":"3959eeff8137a8dd","fromNode":"3c46cfa4f64413bd","fromSide":"right","toNode":"1c7886144ba6e1e4","toSide":"top"},
		{"id":"69eecb9756fe0bff","fromNode":"d309675851ed15c0","fromSide":"top","toNode":"9b990f7e83d9b2af","toSide":"right"},
		{"id":"bd56d53a06527676","fromNode":"1d0f984d6251a7ec","fromSide":"top","toNode":"9a8320343155a14f","toSide":"bottom"},
		{"id":"a1073fbbf0793330","fromNode":"df956f02ce2639b3","fromSide":"top","toNode":"14fec2846cbc7c0e","toSide":"bottom"},
		{"id":"6321d73417601656","fromNode":"7dfb37011d9c32a9","fromSide":"top","toNode":"4e714b9bc5dafdfc","toSide":"bottom"},
		{"id":"160551a1fe4a7a57","fromNode":"055f6a42c93ba69b","fromSide":"top","toNode":"362854891ed25e23","toSide":"bottom"},
		{"id":"369c9be50767e783","fromNode":"6afa4307c9a36135","fromSide":"top","toNode":"492c88e134773ecd","toSide":"bottom"},
		{"id":"99248d911b22f22e","fromNode":"d309675851ed15c0","fromSide":"top","toNode":"30dd2f3ad77376ee","toSide":"bottom"},
		{"id":"d2be9eeba0320ad0","fromNode":"14fec2846cbc7c0e","fromSide":"top","toNode":"f1f4463e467e286d","toSide":"bottom"},
		{"id":"1474eb3da16c8c3e","fromNode":"9a8320343155a14f","fromSide":"top","toNode":"f1f4463e467e286d","toSide":"bottom"},
		{"id":"85cab4735e82577a","fromNode":"9b990f7e83d9b2af","fromSide":"left","toNode":"f74c1adba0a5f3a7","toSide":"bottom"},
		{"id":"2b59bdb831828a04","fromNode":"9b990f7e83d9b2af","fromSide":"left","toNode":"9984ee3a87c1c602","toSide":"right"},
		{"id":"53904f42f1fa0b97","fromNode":"9b990f7e83d9b2af","fromSide":"left","toNode":"b8f02f3e978b3d47","toSide":"right"},
		{"id":"1fa7fd17754f9baa","fromNode":"9984ee3a87c1c602","fromSide":"left","toNode":"0a2dbc8b7851b341","toSide":"right"},
		{"id":"7b11bfb987fee6dd","fromNode":"9984ee3a87c1c602","fromSide":"left","toNode":"9dfac468315f7465","toSide":"right"},
		{"id":"8763b96344568d2b","fromNode":"9984ee3a87c1c602","fromSide":"left","toNode":"619b3e917f65ea0a","toSide":"right"},
		{"id":"159ec69a4b825a00","fromNode":"9984ee3a87c1c602","fromSide":"left","toNode":"ec992a91359934b1","toSide":"right"},
		{"id":"38ad16461fd81d38","fromNode":"9984ee3a87c1c602","fromSide":"left","toNode":"e7661d120f326009","toSide":"right"},
		{"id":"683c024a946441df","fromNode":"9984ee3a87c1c602","fromSide":"left","toNode":"c415e28d38524faf","toSide":"right"},
		{"id":"060135358524684f","fromNode":"9984ee3a87c1c602","fromSide":"left","toNode":"0c724f53238378ee","toSide":"right"},
		{"id":"84358b43c111c551","fromNode":"9984ee3a87c1c602","fromSide":"left","toNode":"dc11aead689beb32","toSide":"right"},
		{"id":"537a53381f2a88f4","fromNode":"9984ee3a87c1c602","fromSide":"left","toNode":"0c815c6d5fb73465","toSide":"right"},
		{"id":"843fd4ca79d51193","fromNode":"f74c1adba0a5f3a7","fromSide":"top","toNode":"1d0f984d6251a7ec","toSide":"bottom"},
		{"id":"3472395e60f75d7e","fromNode":"f74c1adba0a5f3a7","fromSide":"top","toNode":"df956f02ce2639b3","toSide":"bottom"},
		{"id":"de869c5814e6a8d6","fromNode":"f74c1adba0a5f3a7","fromSide":"top","toNode":"99504f3be2b3b7ed","toSide":"bottom"},
		{"id":"21ed69b0cfe93148","fromNode":"f74c1adba0a5f3a7","fromSide":"top","toNode":"e761e9d3f989c879","toSide":"bottom"},
		{"id":"58bc81baa2fe013a","fromNode":"99504f3be2b3b7ed","fromSide":"top","toNode":"7a8c85f1934ec595","toSide":"bottom"},
		{"id":"5dbeb743f05b8ee4","fromNode":"e761e9d3f989c879","fromSide":"top","toNode":"1d9b780f70b238a8","toSide":"bottom"},
		{"id":"49d82e4b98b2c69b","fromNode":"7a8c85f1934ec595","fromSide":"top","toNode":"98e889909db00366","toSide":"bottom"},
		{"id":"1991742ea783ffbe","fromNode":"1d9b780f70b238a8","fromSide":"top","toNode":"98e889909db00366","toSide":"bottom"},
		{"id":"edbe49be66008638","fromNode":"f74c1adba0a5f3a7","fromSide":"top","toNode":"42b81a79c6d754d5","toSide":"bottom"},
		{"id":"7942f56d22434bd6","fromNode":"b8f02f3e978b3d47","fromSide":"bottom","toNode":"a2e89044e5f679e9","toSide":"top"},
		{"id":"965fe4740d59b175","fromNode":"b8f02f3e978b3d47","fromSide":"bottom","toNode":"73b93a67e8da1d3c","toSide":"top"},
		{"id":"763d47879c33c09e","fromNode":"a2e89044e5f679e9","fromSide":"bottom","toNode":"114fd820627b7857","toSide":"top"},
		{"id":"307b30a919fb7210","fromNode":"73b93a67e8da1d3c","fromSide":"bottom","toNode":"71dcd2304f1537aa","toSide":"top"},
		{"id":"df5ae17a879f38dc","fromNode":"a2e89044e5f679e9","fromSide":"bottom","toNode":"71dcd2304f1537aa","toSide":"top"},
		{"id":"a248b2b4200b57ef","fromNode":"9b990f7e83d9b2af","fromSide":"left","toNode":"6aeee440d2a8e426","toSide":"top"},
		{"id":"de8a9a8c0e505ffd","fromNode":"2129c964f931dd44","fromSide":"top","toNode":"6fa27367ea98a0d3","toSide":"bottom","color":"3"},
		{"id":"82fadae1657b3404","fromNode":"9b69e0d29521904a","fromSide":"top","toNode":"6fa27367ea98a0d3","toSide":"bottom","color":"1"}
	]
}